generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String          @unique
  password       String
  role           UserRole        @default(USER)
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  problem        Problem[]
  submission     Submission[]
  solvedProblems ProblemSolved[]
  playlists      Playlist[]
}

model Problem {
  id                 String               @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  codeSnippets       Json
  referenceSolutions Json
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission         Submission[]
  solvedBy           ProblemSolved[]
  problemsPlaylist   ProblemsInPlaylist[]
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String
  status        String
  memory        String
  time          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcases TestCaseResult[]
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String?
  expected       String
  stderr         String?
  compiledOutput String?
  status         String
  memory         String
  time           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  problems ProblemsInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // unique playlist name per user
}

model ProblemsInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId]) // unique problem in playlist
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
